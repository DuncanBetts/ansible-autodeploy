---
- name: Directories Exists | Deployment
  file:
    state: directory
    path: "{{ item }}"
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0755
  tags:
    - directory-structure
    - security-concern
    - deployment
    - autodeploy
  with_items:
    - /var/www/.ssh
    - /data/deployment
    - "{{ autodeploy_docroot }}"

- name: Upload Deployment Private Key
  template:
    src: data/deployment/deploy.key
    dest: /data/deployment/deploy.key
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0400
  when: deployment_private_key
  tags:
    - deployment
    - improves-security
    - autodeploy

- name: Upload Deployment Public Key
  template:
    src: data/deployment/deploy.pub
    dest: /data/deployment/deploy.pub
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0444
  when: deployment_public_key
  tags:
    - deployment
    - improves-security
    - autodeploy

- name: Upload reboot deployment script
  template:
    src: data/deployment/update-app-code.sh
    dest: /data/deployment/update-app-code.sh
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0775
  when: autodeploy_deployment_on_reboot
  tags:
    - deployment
    - autodeploy

- name: Create cron to run deployment script at reboot
  cron:
    name: Invoke autodeploy at reboot
    special_time: reboot
    job: /data/deployment/update-app-code.sh >> /data/log/update-app-code.log
  when: autodeploy_deployment_on_reboot

- name: Get Instance ID
  shell: ec2metadata | grep instance-id | cut -f 2 -d ' ' | tr -d -
  register: instance_id
  tags:
    - hostname
    - autodeploy

- name: Setup Automated Deployment | Playbook
  template:
    src: data/deployment/deploy.yml
    dest: /data/deployment/deploy.yml
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0444
  when: autodeploy_using_standard_playbook
  notify: Invoke autodeploy
  tags:
    - deployment
    - using-ansible
    - autodeploy

- name: Setup Automated Deployment | Hosts
  template:
    src: data/deployment/hosts
    dest: /data/deployment/hosts
    owner: "{{ autodeploy_user }}"
    group: "{{ autodeploy_group }}"
    mode: 0444
  when: autodeploy_using_standard_playbook
  tags:
    - deployment
    - using-ansible
    - autodeploy

- name: Configure | sudo | allow autodeploy to restart application
  lineinfile:
    state: present
    dest: /etc/sudoers
    regexp: "^{{ autodeploy_user }}"
    line: "{{ autodeploy_user }} ALL = NOPASSWD : /usr/bin/service {{ autodeploy_restart_target }} restart"
    validate: 'visudo -cf %s'
  when: autodeploy_restart_enabled
  tags:
    - sudo
    - autodeploy
